cmake_minimum_required(VERSION 2.8)

project(XdevLRAIVulkan)

#
# Set the names for the stuff we are going to create

set(XdevLRAIVULKAN XdevLRAIVulkan)

#
# Set the Plugin version
#

set(XDEVLRAIVULKAN_MAJOR_VERSION 0)
set(XDEVLRAIVULKAN_MINOR_VERSION 1)
set(XDEVLRAIVULKAN_PATCH_VERSION 0)
set(XDEVLRAIVULKAN_VERSION "${XDEVLRAIVULKAN_MAJOR_VERSION}.${XDEVLRAIVULKAN_MINOR_VERSION}.${XDEVLRAIVULKAN_PATCH_VERSION}")

add_definitions(
	-DXDEVLRAIVULKAN_MAJOR_VERSION=${XDEVLRAIVULKAN_MAJOR_VERSION}
	-DXDEVLRAIVULKAN_MINOR_VERSION=${XDEVLRAIVULKAN_MINOR_VERSION} 
	-DXDEVLRAIVULKAN_PATCH_VERSION=${XDEVLRAIVULKAN_PATCH_VERSION}
)

#
# Set the Module version
#

set(XDEVLRAIVULKAN_MODULE_MAJOR_VERSION 0)
set(XDEVLRAIVULKAN_MODULE_MINOR_VERSION 1)
set(XDEVLRAIVULKAN_MODULE_PATCH_VERSION 0)
set(XDEVLRAIVULKAN_MODULE_VERSION "${XDEVLRAIVULKAN_MODULE_MAJOR_VERSION}.${XDEVLRAIVULKAN_MODULE_MINOR_VERSION}.${XDEVLRAIVULKAN_MODULE_PATCH_VERSION}")

add_definitions(
	-DXDEVLRAIVULKAN_MODULE_MAJOR_VERSION=${XDEVLRAIVULKAN_MODULE_MAJOR_VERSION}
	-DXDEVLRAIVULKAN_MODULE_MINOR_VERSION=${XDEVLRAIVULKAN_MODULE_MINOR_VERSION} 
	-DXDEVLRAIVULKAN_MODULE_PATCH_VERSION=${XDEVLRAIVULKAN_MODULE_PATCH_VERSION}
)

#
# Set variable names for the library

set(HEADERS_DIR ${XDEVL_PLUGINS}/XdevLRAI)
set(SRC_DIR ${XDEVL_PLUGINS}/XdevLRAI)

#
# Set the output directories

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(HEADER_INTERFACE_FILE 
	${HEADERS_DIR}/XdevLRAI.h
	${HEADERS_DIR}/XdevLTexture.h
	${HEADERS_DIR}/XdevLTextureCube.h
	${HEADERS_DIR}/XdevLTexture3D.h
	${HEADERS_DIR}/XdevLFrameBuffer.h
	${HEADERS_DIR}/XdevLVertexBuffer.h
	${HEADERS_DIR}/XdevLIndexBuffer.h
	${HEADERS_DIR}/XdevLVertexArray.h
	${HEADERS_DIR}/XdevLVertexDeclaration.h
	${HEADERS_DIR}/XdevLStreamBuffer.h
	${HEADERS_DIR}/XdevLShader.h
	${HEADERS_DIR}/XdevLShaderProgram.h
)

#
# Set header files for the library.

set(HEADER_FILES
	${HEADER_INTERFACE_FILE}
	${SRC_DIR}/XdevLRAIVulkan/XdevLRAIVulkan.h
	${SRC_DIR}/XdevLRAIVulkan/XdevLVertexBufferVulkan.h
)

#
# Set the source files for the library.

set(SOURCE_FILES
	${SRC_DIR}/XdevLRAIVulkan/XdevLRAIVulkan.cpp
	${SRC_DIR}/XdevLRAIVulkan/XdevLVertexBufferVulkan.cpp
)


#
# Add external libraries folder

link_directories(
	${XdevL_BINARY_DIR}/lib
)

#
# Create the library

add_library(${XdevLRAIVULKAN} SHARED
    ${HEADER_FILES}
    ${SOURCE_FILES}
)

#
# Add include directories

include_directories(
	.
	${XDEVL_HOME}/include
	${XDEVL_PLUGINS}
	${XDEVL_PLUGINS}/XdevLRAI
	${HEADERS_DIR}
)

#
# Add external ibraries

if(UNIX)
		target_link_libraries( ${XdevLRAIVULKAN} XdevL vulkan)
elseif(WIN32)
		target_link_libraries( ${XdevLRAIVULKAN} XdevL vulkan)
endif()

#
# Change the outputname of the library

set_property(TARGET ${XdevLRAIVULKAN} PROPERTY PREFIX "${XDEVL_SHARED_LIBRARY_FILE_PREFIX}")

if(CMAKE_BUILD_TYPE MATCHES Debug)
	set_property(TARGET ${XdevLRAIVULKAN} PROPERTY SUFFIX "-${XDEVLRAIVULKAN_MODULE_VERSION}d${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
else()
	set_property(TARGET ${XdevLRAIVULKAN} PROPERTY SUFFIX "-${XDEVLRAIVULKAN_MODULE_VERSION}${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
endif()

install(FILES ${HEADER_INTERFACE_FILE} DESTINATION "${XDEVL_PLUGINS_INCLUDE_INSTALL_PATH}/${PROJECT_NAME}")
install(TARGETS ${XdevLRAIVULKAN} DESTINATION ${XDEVL_PLUGINS_INSTALL_PATH})

