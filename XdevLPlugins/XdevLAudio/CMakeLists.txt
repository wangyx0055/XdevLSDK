cmake_minimum_required(VERSION 2.8)

project(XdevLAudio)

find_package(OpenAL)

#
# Set the names for the stuff we are going to create

set(XdevLAudioALLibrary XdevLAudioAL)


#
# Set the Plugin version
#

set(XDEVLAUDIO_MAJOR_VERSION 1)
set(XDEVLAUDIO_MINOR_VERSION 0)
set(XDEVLAUDIO_PATCH_VERSION 0)
set(XDEVLAUDIO_VERSION "${XDEVLAUDIO_MAJOR_VERSION}.${XDEVLAUDIO_MINOR_VERSION}.${XDEVLAUDIO_PATCH_VERSION}")

add_definitions(
	-DXDEVLAUDIO_MAJOR_VERSION=${XDEVLAUDIO_MAJOR_VERSION}
	-DXDEVLAUDIO_MINOR_VERSION=${XDEVLAUDIO_MINOR_VERSION} 
	-DXDEVLAUDIO_PATCH_VERSION=${XDEVLAUDIO_PATCH_VERSION}
)

#
# Set the AL Module version
#

set(XDEVLAUDIO_MODULE_MAJOR_VERSION 0)
set(XDEVLAUDIO_MODULE_MINOR_VERSION 2)
set(XDEVLAUDIO_MODULE_PATCH_VERSION 0)
set(XDEVLAUDIO_MODULE_VERSION "${XDEVLAUDIO_MODULE_MAJOR_VERSION}.${XDEVLAUDIO_MODULE_MINOR_VERSION}.${XDEVLAUDIO_MODULE_PATCH_VERSION}")

add_definitions(
	-DXDEVLAUDIO_MODULE_MAJOR_VERSION=${XDEVLAUDIO_MODULE_MAJOR_VERSION}
	-DXDEVLAUDIO_MODULE_MINOR_VERSION=${XDEVLAUDIO_MODULE_MINOR_VERSION} 
	-DXDEVLAUDIO_MODULE_PATCH_VERSION=${XDEVLAUDIO_MODULE_PATCH_VERSION}
)


#
# Set the RecordAL Module version
#

set(XDEVLAUDIORECORD_MODULE_MAJOR_VERSION 0)
set(XDEVLAUDIORECORD_MODULE_MINOR_VERSION 2)
set(XDEVLAUDIORECORD_MODULE_PATCH_VERSION 0)
set(XDEVLAUDIORECORD_MODULE_VERSION "${XDEVLAUDIORECORD_MODULE_MAJOR_VERSION}.${XDEVLAUDIORECORD_MODULE_MINOR_VERSION}.${XDEVLAUDIORECORD_MODULE_PATCH_VERSION}")

add_definitions(
	-DXDEVLAUDIORECORD_MODULE_MAJOR_VERSION=${XDEVLAUDIORECORD_MODULE_MAJOR_VERSION}
	-DXDEVLAUDIORECORD_MODULE_MINOR_VERSION=${XDEVLAUDIORECORD_MODULE_MINOR_VERSION} 
	-DXDEVLAUDIORECORD_MODULE_PATCH_VERSION=${XDEVLAUDIORECORD_MODULE_PATCH_VERSION}
)

#
# Set variable names for the library

set(HEADERS_DIR .)
set(SRC_DIR .)

#
# Set the output directories

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

#
# Set header files for the library.

set(HEADER_FILES
	${HEADERS_DIR}/XdevLAudio.h
	${HEADERS_DIR}/XdevLAudioAL.h
)

#
# Set the source files for the library.

set(SOURCE_FILES
	${SRC_DIR}/XdevLAudioAL.cpp
)

#
# Add external libraries folder

link_directories(
	${XdevL_BINARY_DIR}/lib
)
	
#
# Create the library

add_library(${XdevLAudioALLibrary} SHARED
    ${HEADER_FILES}
    ${SOURCE_FILES}
)

#
# Add include directories
#
include_directories( 
	.
	${XDEVL_HOME}/include
	${XDEVL_PLUGINS}
	${OPENAL_INCLUDE_DIR}
)

#
# Add external ibraries

set(LIBS ${OPENAL_LIBRARY} )

if(CMAKE_BUILD_TYPE MATCHES Debug)
	set(LIBS ${LIBS} XdevLd )
else()
	set(LIBS ${LIBS} XdevL )
endif()

target_link_libraries(${XdevLAudioALLibrary} ${LIBS})

#
# Change the outputname of the library

set_property(TARGET ${XdevLAudioALLibrary} PROPERTY PREFIX "")

if(CMAKE_BUILD_TYPE MATCHES Debug)
	set_property(TARGET ${XdevLAudioALLibrary} PROPERTY SUFFIX "-${XDEVLAUDIO_VERSION}d${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
else()
	set_property(TARGET ${XdevLAudioALLibrary} PROPERTY SUFFIX "-${XDEVLAUDIO_VERSION}${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
endif()

