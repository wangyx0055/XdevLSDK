cmake_minimum_required(VERSION 2.8)

project(XdevLFileSystem)

#
# Set the names for the stuff we are going to create

set(XdevLFileSystemLibrary XdevLFileSystem)

#
# Set the Plugin version
#

set(XDEVL_FILESYSTEM_MAJOR_VERSION 0)
set(XDEVL_FILESYSTEM_MINOR_VERSION 1)
set(XDEVL_FILESYSTEM_PATCH_VERSION 0)
set(XDEVL_FILESYSTEM_VERSION "${XDEVL_FILESYSTEM_MAJOR_VERSION}.${XDEVL_FILESYSTEM_MINOR_VERSION}.${XDEVL_FILESYSTEM_PATCH_VERSION}")

add_definitions(
	-DXDEVL_FILESYSTEM_MAJOR_VERSION=${XDEVL_FILESYSTEM_MAJOR_VERSION}
	-DXDEVL_FILESYSTEM_MINOR_VERSION=${XDEVL_FILESYSTEM_MINOR_VERSION} 
	-DXDEVL_FILESYSTEM_PATCH_VERSION=${XDEVL_FILESYSTEM_PATCH_VERSION}
)

#
# Set the Module version
#

set(XDEVL_FILESYSTEM_MODULE_FILE_MAJOR_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_FILE_MINOR_VERSION 2)
set(XDEVL_FILESYSTEM_MODULE_FILE_PATCH_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_FILE_VERSION "${XDEVL_FILESYSTEM_MODULE_FILE_MAJOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_FILE_MINOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_FILE_PATCH_VERSION}")

add_definitions(
	-DXDEVL_FILESYSTEM_MODULE_FILE_MAJOR_VERSION=${XDEVL_FILESYSTEM_MODULE_FILE_MAJOR_VERSION}
	-DXDEVL_FILESYSTEM_MODULE_FILE_MINOR_VERSION=${XDEVL_FILESYSTEM_MODULE_FILE_MINOR_VERSION} 
	-DXDEVL_FILESYSTEM_MODULE_FILE_PATCH_VERSION=${XDEVL_FILESYSTEM_MODULE_FILE_PATCH_VERSION}
)

#
# Set the Module version
#

set(XDEVL_FILESYSTEM_MODULE_DIRECTORY_MAJOR_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORY_MINOR_VERSION 2)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORY_PATCH_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORY_VERSION "${XDEVL_FILESYSTEM_MODULE_DIRECTORY_MAJOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_DIRECTORY_MINOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_DIRECTORY_PATCH_VERSION}")

add_definitions(
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORY_MAJOR_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORY_MAJOR_VERSION}
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORY_MINOR_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORY_MINOR_VERSION} 
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORY_PATCH_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORY_PATCH_VERSION}
)


#
# Set the Module version
#

set(XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MAJOR_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MINOR_VERSION 2)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_PATCH_VERSION 0)
set(XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_VERSION "${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MAJOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MINOR_VERSION}.${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_PATCH_VERSION}")

add_definitions(
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MAJOR_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MAJOR_VERSION}
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MINOR_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_MINOR_VERSION} 
	-DXDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_PATCH_VERSION=${XDEVL_FILESYSTEM_MODULE_DIRECTORYWATCHER_PATCH_VERSION}
)


#
# Set variable names for the library

set(HEADERS_DIR .)
set(SRC_DIR .)

#
# Set the output directories

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${XDEVL_PLUGINS}/lib)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${XDEVL_PLUGINS}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE .${XDEVL_PLUGINS}/lib)

#
# Set header files for the library.

set(HEADER_INTERFACE_FILE ${XDEVL_PLUGINS}/XdevLFileSystem/XdevLFileSystem.h)

set(HEADER_FILES
	${HEADER_INTERFACE_FILE}	
)

if(APPLE)
	set(HEADER_FILES ${HEADER_FILES}
		${XDEVL_PLUGINS}/XdevLFileSystem/Unix/XdevLFileSystemUnix.h
		${XDEVL_PLUGINS}/XdevLFileSystem/MacOSX/XdevLFileSystemMacOSX.h
	)
elseif(UNIX)
	set(HEADER_FILES ${HEADER_FILES}
		${XDEVL_PLUGINS}/XdevLFileSystem/Unix/XdevLFileSystemUnix.h
		${XDEVL_PLUGINS}/XdevLFileSystem/Linux/XdevLFileSystemLinux.h
	)
elseif(WIN32)
	set(HEADER_FILES ${HEADER_FILES}
		${XDEVL_PLUGINS}/XdevLFileSystem/Windows/XdevLFileSystemWindows.h
	)
endif()
#
# Set the source files for the library.

if(APPLE)
	set(SOURCE_FILES
		${XDEVL_PLUGINS}/XdevLFileSystem/Unix/XdevLFileSystemUnix.cpp
		${XDEVL_PLUGINS}/XdevLFileSystem/MacOSX/XdevLFileSystemMacOSX.cpp
	)
elseif(UNIX)
	set(SOURCE_FILES
		${XDEVL_PLUGINS}/XdevLFileSystem/Unix/XdevLFileSystemUnix.cpp
		${XDEVL_PLUGINS}/XdevLFileSystem/Linux/XdevLFileSystemLinux.cpp
	)
elseif(WIN32)
	set(SOURCE_FILES
		${XDEVL_PLUGINS}/XdevLFileSystem/Windows/XdevLFileSystemWindows.cpp
	)
endif()

#
# Add include directories

include_directories(
	.
	${XDEVL_HOME}/include
	${XDEVL_PLUGINS}
)


#
# Add external libraries folder

link_directories(
	${XdevL_BINARY_DIR}/lib
)

#
# Create the library

add_library(${XdevLFileSystemLibrary} SHARED
    ${HEADER_FILES}
    ${SOURCE_FILES}
)

#
# Add external ibraries

if(CMAKE_BUILD_TYPE MATCHES Debug)

	if(APPLE)
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevLd
			"-framework CoreServices"
		)
	elseif(UNIX)
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevLd
		)
	elseif(WINDOWS)
		target_link_libraries(${XdevLFileSystemLibrary}
				XdevLd
			)
	else()
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevLd
		)
	endif()

else()

	if(APPLE)
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevL
			"-framework CoreServices"
		)
	elseif(UNIX)
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevL
		)
	elseif(WINDOWS)
			target_link_libraries(${XdevLFileSystemLibrary}
			XdevL
		)
	else()
		target_link_libraries(${XdevLFileSystemLibrary}
			XdevL
		)
	endif()
	
endif()

#
# Change the outputname of the library

set_property(TARGET ${XdevLFileSystemLibrary} PROPERTY PREFIX "${XDEVL_SHARED_LIBRARY_FILE_PREFIX}")

if(CMAKE_BUILD_TYPE MATCHES Debug)
	set_property(TARGET ${XdevLFileSystemLibrary} PROPERTY SUFFIX "-${XDEVL_FILESYSTEM_VERSION}d${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
else()
	set_property(TARGET ${XdevLFileSystemLibrary} PROPERTY SUFFIX "-${XDEVL_FILESYSTEM_VERSION}${XDEVL_SHARED_LIBRARY_FILE_EXTENSION}")
endif()

install(FILES ${HEADER_INTERFACE_FILE} DESTINATION "${XDEVL_PLUGINS_INCLUDE_INSTALL_PATH}/${PROJECT_NAME}")
install(TARGETS ${XdevLFileSystemLibrary} DESTINATION ${XDEVL_PLUGINS_INSTALL_PATH})
